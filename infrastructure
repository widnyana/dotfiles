
#  ┓┏┓┏┓┏┓   ┏┓       •              
#  ┃┫ ┣┫┗┓   ┃ ┏┓┏┓╋┏┓┓┏┓┏┓┏┓┏   ┏┓╋┏
#  ┛┗┛┗┛┗┛╻  ┗┛┗┛┛┗┗┗┻┗┛┗┗ ┛ ┛╻  ┗ ┗┗
#                                    
################################################################
if [[ -x "$(command -v kubectl)" ]]; then
  export KUBE_TMUX_BINARY="$(which kubectl)"
fi

#: kubectl autocomplete
if type "kubectl" > /dev/null; then
  source <(kubectl completion zsh)
fi

#: krew - https://github.com/kubernetes-sigs/krew
PATH=${PATH}:${KREW_ROOT:-$HOME/.krew}/bin

if command 'kubectl' 'ouctl' >> /dev/null 2>&1; then
  source <(kubectl ouctl completion zsh)
fi

#: fubectl - https://github.com/kubermatic/fubectl
if ! [[ -f $HOME/.dotfiles/sources/fubectl.source ]]; then 
  wget https://raw.githubusercontent.com/kubermatic/fubectl/master/fubectl.source -O $HOME/.dotfiles/sources/fubectl.source

  #: fix conflicted alias
  sed -i "s#ked() {#kedit() {#g" $HOME/.dotfiles/sources/fubectl.source
  sed -i "s#kdel() {#kdelete() {#g" $HOME/.dotfiles/sources/fubectl.source
fi
[ -f $HOME/.dotfiles/sources/fubectl.source ] && source $HOME/.dotfiles/sources/fubectl.source

#: Minikube
if type "minikube" >> /dev/null; then
    export MINIKUBE_HOME=$HOME/Infrastructure/labs/minikube
    export MINIKUBE_IN_STYLE=false
    mkdir -p "${MINIKUBE_HOME}"
    source <(minikube completion zsh)
fi

if type "trivy" >> /dev/null; then
  source <(trivy completion zsh)
fi

#: Podman
if [[ -x "$(command -v podman)" ]]; then
  alias docker=podman
  alias docker-compose=podman-compose
  export DOCKER_HOST=unix://$(podman info --format '{{.Host.RemoteSocket.Path}}')
fi


#: docker
if type "docker" > /dev/null; then
  export DOCKER_HOST="unix:///run/docker.sock"
  export BUILDKIT_PROGRESS=plain
  alias podman=docker
  alias podman-compose=docker-compoe
fi

#: https://github.com/buildpacks/pack
if type "pack" > /dev/null; then
. $(pack completion --shell zsh)
fi

#: Helm.sh
if [[ -x "$(command -v helm)" ]]; then
  source <(helm completion zsh)
fi



export PATH="${PATH}:$HOME/.istioctl/bin"


#  ┓┏   ┓ •       
#  ┣┫┏┓┏┣┓┓┏┏┓┏┓┏┓
#  ┛┗┗┻┛┛┗┗┗┗┛┛ ┣┛
#               ┛ 
###########################

#: tfenv - Terraform version manager 
if ! [[ -f ${HOME}/Infrastructure/.tfenv/bin/tfenv ]]; then 
  echo "tfenv does not exist, installing..."
  git clone https://github.com/tfutils/tfenv.git ${HOME}/Infrastructure/.tfenv --depth=1
fi

#: terraform autocompleter
if type "terraform" > /dev/null; then
  alias tf="$(which terraform)"
  complete -o nospace -C $(which terraform) terraform
fi
PATH="${HOME}/Infrastructure/.tfenv/bin:${PATH}"

#: terraformer
if type "terraformer" > /dev/null; then
  alias tfer="$(which terraformer)"
fi 

#: tgenv - Terragrunt version manager 
if ! [[ -f ${HOME}/Infrastructure/.tgenv/bin/tgenv ]]; then 
  echo "tgenv does not exist, installing..."
  git clone https://github.com/cunymatthieu/tgenv ${HOME}/Infrastructure/.tgenv --depth=1
fi
PATH="${HOME}/Infrastructure/.tgenv/bin:${PATH}"
if type "terragrunt" > /dev/null; then
  alias tg="$(which terragrunt)"
fi 

#: Hashicorp Vault
if type "vault" > /dev/null; then
  complete -o nospace -C $(which vault) vault
fi

#: argocd autocomplete
if type "argocd" > /dev/null; then
  source <(argocd completion zsh)
fi

#: Vagrant
export VAGRANT_HOME=$HOME/Development/.vagrant.d
export VAGRANT_DEFAULT_PROVIDER=libvirt

#  ┏┓• ┓  ┓ 
#  ┃┓┓╋┃┏┓┣┓
#  ┗┛┗┗┗┗┻┗┛
#########################
if type "glab" > /dev/null; then
  source <(glab completion -s zsh); compdef _glab glab
fi

#: GitLab
eval "$(register-python-argcomplete gitlab)"

#  ┓┏  ┓       •  
#  ┃┃┏┓┃┏┓┏┓┏┓ ┓┏┓
#  ┗┛┗ ┗┗ ┛ ┗┛•┗┗┛
##########################
if type "velero" > /dev/null; then
  source <(velero completion zsh)
  alias v=velero
  complete -F __start_velero v
fi

#  ┏┓•    •     ┓
#  ┃┃┓┏┓┏┓┓┏┓┏┓┏┫
#  ┣┛┗┛┗┛┗┗┣┛┗ ┗┻
#          ┛    
##########################
if type "pinniped" > /dev/null; then
  source <(pinniped completion zsh)
fi


#  ┏┓┓ ┏┏┓
#  ┣┫┃┃┃┗┓
#  ┛┗┗┻┛┗┛
###################

# aws command autocomplete
if type "aws" > /dev/null; then
  if type "aws_completer" > /dev/null; then
    complete -C "$(which aws_completer)" aws
  fi
fi

#  ┏┓┓•┓   ┓     ┏┓┓     ┓
#  ┣┫┃┓┣┓┏┓┣┓┏┓  ┃ ┃┏┓┓┏┏┫
#  ┛┗┗┗┗┛┗┻┗┛┗┻  ┗┛┗┗┛┗┻┗┻
##########################
if type "aliyun" > /dev/null; then
  complete -o nospace -F $(which aliyun) aliyun
fi

#: Google Cloud SDK
if type "gcloud" > /dev/null; then
  export USE_GKE_GCLOUD_AUTH_PLUGIN=True
  export CLOUDSDK_PYTHON_SITEPACKAGES=1
  export CLOUDSDK_HOME=/usr/lib64/google-cloud-sdk
  source /usr/lib64/google-cloud-sdk/completion.$(basename ${SHELL}).inc
fi 