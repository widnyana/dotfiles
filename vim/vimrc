set nocompatible
let mapleader = ","

" Visual and Motion 
    set ruler           " Display current cursor position on lower right corner
    set showmatch       " set show matching parenthesis
    set number          " Show lines numbers
    set cursorline      " highlight cursorline
    set showmode        " always show what mode we're currently editing in
    set scrolloff=8     " keep 4 lines off the edges of the screen when scrolling
    set mousehide       " Hide Mouse when typing
    set linespace=2     " Prefer a slightly higher line height

    set novisualbell    " don't beep
    set noerrorbells    " don't beep

    set showcmd         " Show command in bottom right of the screen
    set title           " set terminal title

    set backspace=indent,eol,start      " Allow backspacing in insert mode
    set virtualedit=all " allow the cursor to go in to 'invalid' places

set timeoutlen=500  " Lower timeout leader key + command
set hidden          " Switch between buffers without saving
set autoread        " autoread external modification

" Add the unnamed register to the clipboard
set clipboard+=unnamed

"Split windows below the current window.
set splitbelow         

"Resize vsplit
nmap <C-q> :vertical resize +5<cr>
nmap 25 :vertical resize 40<cr>
nmap 50 <c-w>=
nmap 75 :vertical resize 120<cr>

" Quickly go forward or backward to buffer
nmap :bp :BufSurfBack<cr>
nmap :bn :BufSurfForward<cr>

" all about Tab 
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent      " Autoindenting on
set copyindent      " copy the previous indentation on auto indenting
set smarttab        " Insert tabs on the start of a line accroding to 
                    "   shiftwidth, not tabstop

" Search and menu 
set wildmenu                            " More useful command-line completion
set wildmode=list:longest,full          " Auto-completion menu, tab selection
" set wildignorecase                      " Make it easier to complete buffers, 
                                            " open files, etc..
set complete=.,w,b,t                    " Same as default
" set completeopt=longest,menu,preview

set wrapscan        " set the search scan to wrap lines
set incsearch       " show search matches as you type                 
set hlsearch        " Highlight searching                             
set ignorecase      " ignore case when searching                      
set smartcase       " Ignore case if search pattern is all lowercase, 
                    " case-sensitive otherwise                      
set showfulltag     " When completing by tag, show the whole tag,     
                    " not just the function name                    

" No backup and swap 
set nobackup
set noswapfile


" Nice Statusbar 
set laststatus=2                        " Always show the status line
set statusline=                         
set statusline+=%<\                     " truncation point
set statusline+=%n\                     " buffer number
set statusline+=%y\                     " Filetype
set statusline+=%f\                     " filename
set statusline+=%h%m%r%w                " flags
set statusline+=[%{&ff}]                " file format
set statusline+=%{fugitive#statusline()}  " for vim-fugitive statusline
set statusline+=%=                      " align right
set statusline+=%#error#              " start sytastic
set statusline+=%{SyntasticStatuslineFlag()}  " sytastic show error
set statusline+=%*                      " end syntastic
"set statusline+=%{strftime(\"%c\",getftime(expand(\"%:p\")))}  "modified time
set statusline+=%4l                     " line number
set statusline+=/%L                     " total lines
set statusline+=%3c%V                   " column number

" History 
set history=1000                         " keep some stuff in the history
set undolevels=1000                     " many, many, undo
if v:version >= 730
    set undofile                          " keep a presistent backup file
    set undodir=~/.vim/.undo,~/tmp,/tmp
endif

" Better line wrapping 
set nowrap
set textwidth=120
set formatoptions=qrnl


" Mapping 
    " Save vim with sudo
    cmap w!! w !sudo tee  > /dev/null %

    " set text wrapping toggles
    nmap <silent> ,ww :set invwrap<CR>:set wrap?<CR>

    " Wipe out all buffers
    nmap <silent> ,wba :l,9000bwipeout<cr>

    " Yank and Paste key to/from X clipboard
    map <F9> "+gP 
    vmap <C-F9> "+y

    " Turn off that stupid highlight search
    nmap <silent> ,n :nohls<CR>

    " Show all available VIM servers
    nmap <silent> ,ss :echo serverlist()<CR>

    " Jump to matching pair easily with tab
    nnoremap <Tab> %
    vnoremap <Tab> %

    " Make shift-insert work line in Xterm
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>

    " edit the vimrc file
    nmap <silent> ,ev :e $MYVIMRC<CR>
    nmap <silent> ,sv :so $MYVIMRC<CR>

    " change that annoying shift+; for all Vim Commands
    nnoremap ; :

    " quicly close the current window
    nnoremap <leader>q :q<CR>
    nnoremap <leader>wq :wq<CR>

    " write all buffer
    nnoremap <leader>wa :wall<CR>

    " Easier window navigation
    nmap <C-h> <C-w>h 
    nmap <C-j> <C-w>j
    nmap <C-k> <C-w>k
    nmap <C-l> <C-w>l

    " Make Horizontal scrolling easier
    nmap <silent> <C-o> 10zl
    nmap <silent> <C-i> 10zh

    " change to directory of the opened file
    cmap cd. lcd %:p:h
    cmap cwd lcd %:p:h

    "explorer mappings
    nnoremap <f2> :NERDTreeToggle<cr>
    nnoremap <f3> :BuffergatorToggle<cr>
    nnoremap <f4> :TagbarToggle<cr>
    nnoremap <f5> :GundoToggle<cr>

    " easier moving blocks of code
    vnoremap < <gv
    vnoremap > >gv

" Custom Functions 

" SetWrap For Markdown 
    function! SetWrap()
      setlocal wrap linebreak nolist
      set virtualedit=
      setlocal display+=lastline
      noremap  <buffer> <silent> k gk
      noremap  <buffer> <silent> j gj
      noremap  <buffer> <silent> <Home> g<Home>
      noremap  <buffer> <silent> <End>  g<End>
      inoremap <buffer> <silent> <Up>   <C-o>gk
      inoremap <buffer> <silent> <Down> <C-o>gj
      inoremap <buffer> <silent> <Home> <C-o>g<Home>
      inoremap <buffer> <silent> <End>  <C-o>g<End>
    endfunction

    " au BufNewFile,BufRead *.markdown,*.md,*.mdown,*.mkd,*.mkdn call SetWrap()

" EditorConfig
    let g:EditorConfig_exclude_patterns = ['fugitive://.*']  
