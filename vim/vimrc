set nocompatible
let mapleader = ","
set filetype

" Visual and Motion 
    set ruler           " Display current cursor position on lower right corner
    set showmatch       " set show matching parenthesis
    set number          " Show lines numbers
    set cursorline      " highlight cursorline
    set showmode        " always show what mode we're currently editing in
    set scrolloff=8     " keep 4 lines off the edges of the screen when scrolling
    set mousehide       " Hide Mouse when typing
    set linespace=2     " Prefer a slightly higher line height

    set novisualbell    " don't beep
    set noerrorbells    " don't beep

    set showcmd         " Show command in bottom right of the screen
    set title           " set terminal title

    set backspace=indent,eol,start      " Allow backspacing in insert mode
    set virtualedit=all                 " allow the cursor to go in to 'invalid' places

" all about Tab 
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
    set expandtab
    set autoindent      " Autoindenting on
    set copyindent      " copy the previous indentation on auto indenting
    set smarttab        " Insert tabs on the start of a line accroding to 
                        "   shiftwidth, not tabstop

set timeoutlen=500  " Lower timeout leader key + command
set hidden          " Switch between buffers without saving
set autoread        " autoread external modification

" file attributes
set encoding=utf-8

" No backup and swap 
set nobackup
set noswapfile

" Better line wrapping 
set nowrap
set textwidth=180
set formatoptions=qrnl

" Mapping 
    " Save vim with sudo
    cmap w!! w !sudo tee  > /dev/null %

    " set text wrapping toggles
    nmap <silent> ,ww :set invwrap<CR>:set wrap?<CR>

    " Wipe out all buffers
    nmap <silent> ,wba :l,9000bwipeout<cr>

    " Yank and Paste key to/from X clipboard
    map <F9> "+gP 
    vmap <C-F9> "+y

    " Turn off that stupid highlight search
    nmap <silent> ,n :nohls<CR>

    " Show all available VIM servers
    nmap <silent> ,ss :echo serverlist()<CR>

    " Jump to matching pair easily with tab
    nnoremap <Tab> %
    vnoremap <Tab> %

    " Make shift-insert work line in Xterm
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>

    " edit the vimrc file
    nmap <silent> ,ev :e $MYVIMRC<CR>
    nmap <silent> ,sv :so $MYVIMRC<CR>

    " change that annoying shift+; for all Vim Commands
    nnoremap ; :

    " quicly close the current window
    nnoremap <leader>q :q<CR>
    nnoremap <leader>wq :wq<CR>

    " write all buffer
    nnoremap <leader>wa :wall<CR>

    " Easier window navigation
    nmap <C-h> <C-w>h 
    nmap <C-j> <C-w>j
    nmap <C-k> <C-w>k
    nmap <C-l> <C-w>l

    " Make Horizontal scrolling easier
    nmap <silent> <C-o> 10zl
    nmap <silent> <C-i> 10zh

    " change to directory of the opened file
    cmap cd. lcd %:p:h
    cmap cwd lcd %:p:h

    "explorer mappings
    nnoremap <f2> :NERDTreeToggle<cr>
    nnoremap <f3> :BuffergatorToggle<cr>
    nnoremap <f4> :TagbarToggle<cr>
    nnoremap <f5> :GundoToggle<cr>

    " easier moving blocks of code
    vnoremap < <gv
    vnoremap > >gv

" History 
set history=1000                         " keep some stuff in the history
set undolevels=1000                     " many, many, undo
if v:version >= 730
    set undofile                          " keep a presistent backup file
    set undodir=~/.vim/.undo,~/tmp,/tmp
endif

" Custom Functions 

" SetWrap For Markdown 
    function! SetWrap()
      setlocal wrap linebreak nolist
      set virtualedit=
      setlocal display+=lastline
      noremap  <buffer> <silent> k gk
      noremap  <buffer> <silent> j gj
      noremap  <buffer> <silent> <Home> g<Home>
      noremap  <buffer> <silent> <End>  g<End>
      inoremap <buffer> <silent> <Up>   <C-o>gk
      inoremap <buffer> <silent> <Down> <C-o>gj
      inoremap <buffer> <silent> <Home> <C-o>g<Home>
      inoremap <buffer> <silent> <End>  <C-o>g<End>
    endfunction

    " au BufNewFile,BufRead *.markdown,*.md,*.mdown,*.mkd,*.mkdn call SetWrap()

" EditorConfig
    let g:EditorConfig_exclude_patterns = ['fugitive://.*']  

" vim modeline
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
          \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
  endfunction
  nnoremap <silent> <Leader>ml :call AppendModeline()<CR>



" Plugin is managed using plug.vim
"   Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
    Plug 'editorconfig/editorconfig-vim'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'tpope/vim-fugitive'
    Plug 'jeetsukumaran/vim-buffergator'
    Plug 'junegunn/vim-easy-align'

    " Vim plugin to list, select and switch between buffers.
    Plug 'jeetsukumaran/vim-buffergator'

    " replacement for vim-syntastic/syntastic
    Plug 'dense-analysis/ale'

    " Nodejs extension host for vim & neovim, load extensions like VSCode and host language servers.    
    Plug 'neoclide/coc.nvim', {'branch': 'release'}

    " Vim plugin that displays tags in a window, ordered by scope
    Plug 'preservim/tagbar'
    
    " rust
    Plug 'rust-lang/rust.vim', { 'for': ['rust'] }

    " Golang
    Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }

call plug#end()
